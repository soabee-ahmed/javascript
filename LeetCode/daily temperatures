Approach 1 - Using Stack
Intuition
Observation 1 - For a index (suppose i), if we get a bigger element (suppose index j) , then the indices after j are meaningless for that index i.
Observation 2 - we can use a Stack , Double ended queue (As a stack basically) , and traverse from the end , So that for a index ,
- if we find a bigger index in the stack we return the distance
- else we keep only that element in stack (because we need to get a warmer temperature , so if a bigger temp already encountered , no need of smallerr temps.)

Approach
We will use a stack to resolve the problem.

1. Stack Management:
If the stack is empty or the temperature at the current index is warmer than the temperature at the index stored at the top of the stack, we push the current index onto the stack.
If the temperature at the current index is not warmer, we pop indices from the stack until we find a warmer temperature or the stack becomes empty.
2.subtracting indices to get the output array

code
class Solution {
    public int[] dailyTemperatures(int[] temp) {
        Stack<Integer> s=new Stack<>();
        int n=temp.length;
        int[] res=new int[n];
        int[] arr=new int[n];
        s.push(n-1);
        arr[n-1]=-1;
        
        for(int i=n-2;i>=0;i--)                 //applying concept of next greater element and storing its index in the separate array
        {
            while(s.isEmpty()==false&&temp[s.peek()]<=temp[i]){
                s.pop();
            }
            int nextGreater=s.isEmpty()?-1:s.peek();
            arr[i]=nextGreater;
            s.push(i);
        }
        for(int i=0;i<n;i++){                  //here we subtracting the indices of newly created array with the original  array indices
            if(arr[i]==-1){
                res[i]=0;
            }
            else
            res[i]=arr[i]-i;
        }
        return res;
    }
}
