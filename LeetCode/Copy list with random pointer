
Solution #1: Hash Map Method
Intuition and Logic Behind the Solution
The basic idea is to traverse the list twice. In the first pass, we create a new node for each node in the original list and store the mapping in a hash map. In the second pass, we set the next and random pointers for each new node based on the hash map.

Step-by-step Explanation
Initialization:

Create an empty hash map, old_to_new, to store the mapping from old nodes to new nodes.
First Pass - Node Creation:

Traverse the original list and for each node, create a corresponding new node.
Store the mapping in old_to_new.
Second Pass - Setting Pointers:

Traverse the original list again.
For each node, set its corresponding new node's next and random pointers based on the hash map.
Complexity Analysis
Time Complexity: O(n)O(n)O(n) — Each node is visited twice.
Space Complexity: O(n)O(n)O(n) — To store the hash map.
code:
public class Solution {
    public Node copyRandomList(Node head) {
        if (head == null) return null;
        
        HashMap<Node, Node> oldToNew = new HashMap<>();
        
        Node curr = head;
        while (curr != null) {
            oldToNew.put(curr, new Node(curr.val));
            curr = curr.next;
        }
        
        curr = head;
        while (curr != null) {
            oldToNew.get(curr).next = oldToNew.get(curr.next);
            oldToNew.get(curr).random = oldToNew.get(curr.random);
            curr = curr.next;
        }
        
        return oldToNew.get(head);
    }
}


//optimized approach (in place)
Solution #2: Interweaving Nodes Method
Intuition and Logic Behind the Solution
The crux of this method is to interweave the nodes of the original and copied lists. This interweaving allows us to set the random pointers for the new nodes without needing additional memory for mapping.

Step-by-step Explanation
Initialization and Interweaving:

Traverse the original list.
For each node, create a corresponding new node and place it between the current node and the current node's next.
Setting Random Pointers:

Traverse the interweaved list.
For each old node, set its corresponding new node's random pointer.
Separating Lists:

Traverse the interweaved list again to separate the old and new lists.
Complexity Analysis
Time Complexity: O(n)O(n)O(n) — Each node is visited multiple times but it's still linear time.
Space Complexity: O(1)O(1)O(1) — No additional memory is used for mapping; we only allocate nodes for the new list.

code:
/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public void insertCopyInBetween(Node head){
        Node temp=head;
        while(temp!=null){
            Node copyNode=new Node(temp.val);
            copyNode.next=temp.next;
            temp.next=copyNode;
            temp=temp.next.next;
        }
    }
    public void connectRandomPointers(Node head){
        Node temp=head;
        while(temp!=null){
            Node copyNode = temp.next;
            if(temp.random!=null)
            copyNode.random=temp.random.next;
            else
            copyNode.random=null;
            temp=temp.next.next;
        }
    }
    public Node connectNextPointer(Node head){
        Node dummyNode=new Node(-1);
        Node res=dummyNode;
        Node temp=head;
        while(temp!=null){
            res.next=temp.next;
            temp.next=temp.next.next;
            res=res.next;
            temp=temp.next;
        }
        return dummyNode.next;
    }
    public Node copyRandomList(Node head) {
        insertCopyInBetween(head);
        connectRandomPointers(head);
        return connectNextPointer(head);
    }
}
