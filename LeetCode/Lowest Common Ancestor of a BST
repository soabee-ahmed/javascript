Intuition
It is BST so we should think, May be we can write a O(H) algo. If you notice in BT we can find LCA in O(N). Note that O(H) is better than O(N) mostly. because if the tree is balanced H will LogN.

Approach
we will always start with the root.

case 1: if root itself is p Or q then it is the LCA. eg: p = 1, q = 2

case 2: if root > p && root < q, it means p is present at left side of root and q is present at right side of root. Then root is the LCA. eg: p = 1 , q = 3

case 3: p & q both present at left Or p & q both present at right. Then we can update the root accordingly. (root = root.right or root.left). eg: p = 1, q = 3 in below tree ( you can take p = 5, q = 7 also)

Complexity
Time complexity:
O(H) , if the Tree is balanced then H = log N (Base 2), in worst case H will N.

Space complexity:
O(1) since we are not using extra space and No Recusion
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode(int x) { val = x; }
 * }
 */

class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        while (root != null) {
            if ((root.val == p.val || root.val == q.val) || root.val > p.val && root.val < q.val
                    || root.val < p.val && root.val > q.val) {
                return root;
            }
            if (root.val < p.val && root.val < q.val) {
                root = root.right;
            }
            if (root.val > p.val && root.val > q.val) {
                root = root.left;
            }
        }
        return root;
    }
}
