/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    // public boolean isSubtree(TreeNode s, TreeNode t) {
        //RECURSIVE APPROACH
    //     if(s==null){
    //         return false;
    //     }
    //     if(isSame(s,t)){
    //         return true;
    //     }
    //     return isSubtree(s.left,t)||isSubtree(s.right,t);
    // }
    public boolean isSubtree(TreeNode s,TreeNode t){
    //ITERATIVE APPROACH
        Queue<TreeNode> q=new LinkedList<>();
        q.add(s);
        while(!q.isEmpty()){
            TreeNode a=q.poll();
            if(isSame(a,t)){
                return true;
            }
            if(a.left!=null){
                q.add(a.left);
            }
            if(a.right!=null){
                q.add(a.right);
            }
        }
        return false;
    }
    private boolean isSame(TreeNode s,TreeNode t){
        if(s==null&&t==null){
            return true;
        }
        if(s==null||t==null){
            return false;
        }
        if(s.val!=t.val){
            return false;
        }
        
        return isSame(s.left,t.left)&&isSame(s.right,t.right);
    }
}
