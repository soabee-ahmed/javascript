class Solution {
    private long caltrips(int[] time,int totalTrips,long n){
        long sum=0;
        for(int i=0;i<time.length;i++){
            sum+=(n/time[i]);
        }
        return sum;
    }
    private long getMax(int[] time){
        long max=Integer.MIN_VALUE;
        for(int i:time){
            max=Math.max(i,max);
        }
        return max;
    }
    public long minimumTime(int[] time,int totalTrips) {
        if(time.length==1){
            return (long) totalTrips*time[0];
        }
        long sum=0;
        // for(int i=0;i<time.length;i++){
        //     sum+=time[i];
        // }
        long low=1;
        long high=getMax(time)*totalTrips;
        while(low<=high){
            long mid=low+(high-low)/2;
            if(caltrips(time,totalTrips,mid)>=totalTrips){
                high=mid-1;
            }
            // else if(caltrips(time,totalTrips,mid)<totalTrips){
            //     low=mid+1;
            // }
            else{
                low=mid+1;
                // break;
            }
        }
        return low;
    }
}
