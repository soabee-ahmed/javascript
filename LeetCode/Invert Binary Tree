/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode invertTree(TreeNode root) {
        //RECURSIVE APPROACH
        TreeNode newRoot=root;
        if(root==null){
            return null;
        }
        TreeNode left=invertTree(root.left);
        TreeNode right=invertTree(root.right);
        root.left=right;
        root.right=left;
        return root;
        
        /*
        ITERATIVE APPROACH
        Queue<TreeNode> q=new LinkedList<>();
        if(root!=null){
            q.add(root);
        }
        while(!q.isEmpty()){
            TreeNode newNode=q.poll();
            if(newNode.left!=null){
                q.add(newNode.left);
            }
            if(newNode.right!=null){
                q.add(newNode.right);
            }
        TreeNode temp=newNode.left;
        newNode.left=newNode.right;
        newNode.right=temp;
        }
        return root;
        */

    }
}
